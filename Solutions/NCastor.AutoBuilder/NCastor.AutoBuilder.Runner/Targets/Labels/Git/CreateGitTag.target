<?xml version="1.0" encoding="utf-8" ?>

<!--
<copyright file="CreateGitTag.target" company="Juan Pablo Olmos Lara (Jupaol)">

  jupaol@hotmail.com
  http://jupaol.blogspot.com/

</copyright>
-->

<Project DefaultTargets="All" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <CreateGitTagDependsOn>
      FormatLabelName;
      BeforeCreateGitTag;
      CoreCreateGitTag;
      AfterCreateGitTag;
    </CreateGitTagDependsOn>
  </PropertyGroup>

  <Target Name="CreateGitTag" DependsOnTargets="$(CreateGitTagDependsOn)" Condition="$(CreateLabel) == 'true'"/>

  <!-- To be overriden by the user -->
  <Target Name="BeforeCreateGitTag" />
  <Target Name="AfterCreateGitTag" />

  <Target Name="CoreCreateGitTag">

    <Message Text="$(LoggingMessagePrefix) Creating the Git tag. This task should be the last process called in your build process..." Importance="high" />

    <Error Text="The Git runner was not specified" Condition="$(GitRunner) == ''" />
    <Error Text="The Git runner was not found" Condition="!Exists($(GitRunner))" />
    <Error Text="The 'LabelName' is required to create the Git tag" Condition="$(LabelName) == ''" />
    <Error Text="The Git timeout used to push the tag is required" Condition="$(GitPushTimeOut) == ''"/>
    <Error Text="The Git default remote used to push the tag is required" Condition="$(GitDefaultRemote) == ''"/>

    <PropertyGroup>
      <_GitLabelResultFilePath>$(WorkingDirectoryPath)\GitLabelResult.txt</_GitLabelResultFilePath>
    </PropertyGroup>

    <!--Check to see if the tag already exists in the Git repository-->
    <Message Text="$(LoggingMessagePrefix) Trying to find a tag in the current Git repository with the name: ($(LabelName))..." Importance="normal" />
    <Exec 
      Command='"$(GitRunner)" tag -l "$(LabelName)" >> "$(_GitLabelResultFilePath)"'
      WorkingDirectory='$(GlobalRootPath)'/>
    <ReadLinesFromFile File="$(_GitLabelResultFilePath)" >
      <Output ItemName="_Git_Tags_Found" TaskParameter="Lines"/>
    </ReadLinesFromFile>
    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="GetItemCount" InputItems1="@(_Git_Tags_Found)">
      <Output TaskParameter="ItemCount" PropertyName="_Git_Tags_Found_Count"/>
    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
    <Warning 
      Text="The Tag: $(LabelName) already exisis! The new tag name will be: $(LabelName)$(LabelNameSufixWhenLabelExists)" 
      Condition="$(_Git_Tags_Found_Count) != 0"/>
    <Message 
      Text="$(LoggingMessagePrefix) The tag: ($(LabelName)) was found. For consistency, this tag WON'T BE OVERRIDDEN; instead, a new tag will be created with the following name: ($(LabelName)$(LabelNameSufixWhenLabelExists))..." 
      Importance="high" 
      Condition="$(_Git_Tags_Found_Count) != 0"/>
    <PropertyGroup Condition="$(_Git_Tags_Found_Count) != 0">
      <LabelName>$(LabelName)$(LabelNameSufixWhenLabelExists)</LabelName>
    </PropertyGroup>

    <Message Text="$(LoggingMessagePrefix) Creating the tag: ($(LabelName))..." Importance="normal" />
    <Exec 
      Command='"$(GitRunner)" tag -a "$(LabelName)" -m "NCastor AutoBuilder - Auto-Tagging: $(LabelName) from build: $(InformationalVersion)"'
      WorkingDirectory='$(GlobalRootPath)'/>
    
    <Message Text='$(LoggingMessagePrefix) Pushing the tag: ($(LabelName)) using the following remote: ($(GitDefaultRemote))...'  Importance="normal" />
    <Exec
      Command='"$(GitRunner)" push $(GitDefaultRemote) $(LabelName)'
      WorkingDirectory='$(GlobalRootPath)' 
      Timeout='$(GitPushTimeOut)'/>

  </Target>
  
</Project>
